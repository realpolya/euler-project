'''
Highly Divisible Triangular Number

The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
Let us list the factors of the first seven triangle numbers:

 1 : 1
 3 : 1,3
 6 : 1,2,3,6
10 : 1,2,5,10
15 : 1,3,5,15
21 : 1,3,7,21
28 : 1,2,4,7,14,28

We can see that 28 is the first triangle number to have over five divisors.
What is the value of the first triangle number to have over five hundred divisors?

'''

def divisible_triangle(divisors_num):

    triangles = []
    answer = False
    order = 1

    # create a while loop for answer being False
    while not answer:

        current_triangle = 0

        # create a for loop to add to the current_triangle
        for i in range(1, order + 1):
            current_triangle += i
        
        order += 1
        triangles.append(current_triangle)
        print('current triangle is ', current_triangle)

        # loop through natural numbers, find divisors of current_triangle
        divisors = []
        for i in range(1, current_triangle + 1):
            if current_triangle % i == 0:
                divisors.append(i)

        # if divisors == divisors_num or larger
        if len(divisors) >= divisors_num:

            # assign answer to current_triangle
            answer = current_triangle

    # return answer
    return answer

# print(divisible_triangle(5))
print(divisible_triangle(500))