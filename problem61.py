'''
Cyclical Figurate Numbers

Triangle, square, pentagonal, hexagonal, heptagonal, and octagonal numbers 
are all figurate (polygonal) numbers and are generated by the following formulae:


Triangle
P_{3,n}=n(n+1)/2
1, 3, 6, 10, 15, ...


Square
P_{4,n}=n^2
1, 4, 9, 16, 25, ...


Pentagonal
P_{5,n}=n(3n-1)/2
1, 5, 12, 22, 35, ...


Hexagonal
P_{6,n}=n(2n-1)
1, 6, 15, 28, 45, ...


Heptagonal
P_{7,n}=n(5n-3)/2
1, 7, 18, 34, 55, ...


Octagonal
P_{8,n}=n(3n-2)
1, 8, 21, 40, 65, ...

The ordered set of three 4-digit numbers: 8128, 2882, 8281, has three 
interesting properties.

- The set is cyclic, in that the last two digits of each number is 
the first two digits of the next number (including the last number with the first).
- Each polygonal type: triangle (P_{3,127}=8128), square (P_{4,91}=8281), 
and pentagonal (P_{5,44}=2882), is represented by a different number in the set.
- This is the only set of 4-digit numbers with this property.

Find the sum of the only ordered set of six cyclic 4-digit numbers for 
which each polygonal type: triangle, square, pentagonal, hexagonal, heptagonal, 
and octagonal, is represented by a different number in the set.

'''

# find 6 numbers (all 4 digits) â€“ not nessecarily ascending or descending order

# find all of the numbers up between 1000 and 10 000 in each set

from extras.utils import generate_polygonal_set

def triangular_formula(n):
    return n * (n+1) / 2

def square_formula(n):
    return n ** 2

def pentagonal_formula(n):
    return n * (3 * n - 1)/2

def hexagonal_formula(n):
    return n * (2 * n - 1)

def heptagonal_formula(n):
    return n * (5 * n - 3) / 2

def octagonal_formula(n):
    return n * (3 * n - 2)


def find_overlap(chars, set, direction):

    overlapping = []
    # print(" the set is passed down ", set, "chars are passed down ", chars)

    for num in set:

        first_two = str(num)[:2]
        last_two = str(num)[-2:]

        if direction == "last" and last_two == chars:
            overlapping.append(num)
        elif direction == "first" and first_two == chars:
            # print("first two ", first_two, "equals to chars ", chars)
            overlapping.append(num)
    
    return overlapping



def generate_sets():

    start = 1000
    limit = 10000

    tri_set = generate_polygonal_set(start, limit, triangular_formula)
    square_set = generate_polygonal_set(start, limit, square_formula)
    penta_set = generate_polygonal_set(start, limit, pentagonal_formula)
    hexa_set = generate_polygonal_set(start, limit, hexagonal_formula)
    hepta_set = generate_polygonal_set(start, limit, heptagonal_formula)
    octa_set = generate_polygonal_set(start, limit, octagonal_formula)

    list_of_sets = [square_set, penta_set, hexa_set, hepta_set, octa_set]
    all_sets = {
        'tri': tri_set, 
        'squ': square_set, 
        'pen': penta_set, 
        'hex': hexa_set, 
        'hep': hepta_set, 
        'oct': octa_set
    }

    rk_values = set() # rk is in triangular numbers
    kl_dict = {} # contains list of rk keys with kl possible candidates
    yr_dict = {} # contains list of rk keys with yr possible candidates
    lm_dict = {} # contains list of kl keys with lm possible candidates
    xy_dict = {} # contains list of yr keys with xy possible candidates
    mx_dict = {} # calculates overlap between lm and xy

    m_set = set()
    x_set = set()
    l_set = set()
    y_set = set()
    r_set = set()
    k_set = set()

    # print(all_sets)

    kl_possibilities = {}
    yr_possibilities = {}

    for key, other_set in all_sets.items():

        if key != "tri":

            kl_possibilities[key] = set()

            for tri in tri_set:

                r = str(tri)[:2]
                k = str(tri)[-2:]

                # print("for tri ", tri, "yr possibilities are ", plausible_first)
                plausible_last = find_overlap(k, other_set, "first") # kl

                if plausible_last:
                    kl_possibilities[key].update(plausible_last)
                    k_set.add(k)
                    # plausible_kl.update(plausible_last)

    print("kl possibilities", kl_possibilities)
    print("---------------")
    # print("k candidates ", k_set)

    for key, other_set in all_sets.items():

        if key != "tri":

            yr_possibilities[key] = set()

            for tri in tri_set:

                r = str(tri)[:2]
                k = str(tri)[-2:]

                plausible_first = find_overlap(r, other_set, "last") # yr

                if plausible_first:
                    yr_possibilities[key].update(plausible_first)
                    r_set.add(r)
    
    print("---------------")

    # print("yr possibilities ", yr_possibilities)
    print("---------------")
    # print("r candidates ", r_set)
    print("---------------")

    suspect_list = ["squ", "pen", "hex", "hep", "oct"]

    def find_lm(suspect, all_sets, kl_possibilities):

        lm_possibilities = {}

        for key, other_set in all_sets.items():

            if key != "tri":

                if key != suspect:

                    lm_possibilities[key] = set()

                    # print("here", kl_possibilities[suspect[0]])

                    # print("suspect is", suspect, "kl possibilities are ", kl_possibilities[suspect])

                    for kl in kl_possibilities[suspect]:

                        k = str(kl)[:2]
                        l = str(kl)[-2:]
                        # print("l is ", l)

                        plausible_last = find_overlap(l, other_set, "first") # lm
                        # print("other set is ", other_set)


                        if plausible_last:
                            lm_possibilities[key].update(plausible_last)
                            # print("for kl ", kl, "the overlap is ", plausible_last)
                            # l_set.add(l)
        
        return lm_possibilities
    
    def find_mx(suspect, grand_suspect, all_sets, lm_possibilities):

        mx_possibilities = {}

        for key, other_set in all_sets.items():

            if key != "tri":

                if key != suspect and key != grand_suspect:

                    mx_possibilities[key] = set()

                    # print("here", kl_possibilities[suspect[0]])

                    # print("suspect is", suspect, "kl possibilities are ", kl_possibilities[suspect])

                    for lm in lm_possibilities[suspect]:

                        l = str(lm)[:2]
                        m = str(lm)[-2:]
                        # print("l is ", l)

                        plausible_last = find_overlap(m, other_set, "first") # lm
                        # print("other set is ", other_set)


                        if plausible_last:
                            mx_possibilities[key].update(plausible_last)
                            # print("for kl ", kl, "the overlap is ", plausible_last)
                            # l_set.add(l)
        
        return mx_possibilities
    

    def find_xy(suspect, prev_suspect, grand_suspect, all_sets, mx_possibilities):

        xy_possibilities = {}

        for key, other_set in all_sets.items():

            if key != "tri":

                if key != suspect and key != grand_suspect and key != prev_suspect:

                    xy_possibilities[key] = set()

                    # print("here", kl_possibilities[suspect[0]])

                    # print("suspect is", suspect, "kl possibilities are ", kl_possibilities[suspect])

                    # print("suspect is ", suspect, "mx possibilities are ", mx_possibilities)

                    for mx in mx_possibilities[suspect]:

                        m = str(mx)[:2]
                        x = str(mx)[-2:]
                        # print("l is ", l)

                        plausible_last = find_overlap(x, other_set, "first") # xy
                        # print("other set is ", other_set)


                        if plausible_last:
                            xy_possibilities[key].update(plausible_last)
                            # print("for kl ", kl, "the overlap is ", plausible_last)
                            # l_set.add(l)
        
        return xy_possibilities

    
    for suspect in suspect_list:

        lm_possibilities = find_lm(suspect, all_sets, kl_possibilities)
        
        # print("for suspect ", suspect, "lm possibilities ", lm_possibilities)

        for next_suspect in suspect_list:

            if next_suspect != suspect:

                mx_possibilities = find_mx(next_suspect, suspect, all_sets, lm_possibilities)

                # print("grand suspect: ", suspect, ". for next suspect ", next_suspect, "mx possibilities are", mx_possibilities)

                for super_suspect in suspect_list:

                    if super_suspect != suspect and super_suspect != next_suspect:

                        xy_possibilities = find_xy(super_suspect, next_suspect, suspect, all_sets, mx_possibilities)

                        print("grand suspect: ", suspect, ". for next suspect ", next_suspect, "with super suspect ", super_suspect, "xy possibilities are", xy_possibilities)

                        for xy_key, xy_value in xy_possibilities.items():

                            for yr_key, yr_value in yr_possibilities.items():

                                for xy in xy_value:

                                    if xy in yr_value and xy_key == yr_key:

                                        print("match found. key xy: ", xy_key, "key yr:", yr_key, "xy_value set", xy_value, "yr_value set", yr_value, "overlap: ", xy)
    
    # print(yr_possibilities)








    # print ("kl dict is ", kl_dict)
    # print("yr_dict is ", yr_dict)


    # for key, value in kl_dict.items():

    #     for kl in value:

    #         k = str(kl)[:2]
    #         l = str(kl)[-2:]

    #         plausible_lm = set()

    #         for other_set in list_of_sets:

    #             plausible_last = find_overlap(l, other_set, "first") # lm
    #             # print("for kl ", kl, "lm possibilities are ", plausible_last)

    #             if plausible_last:
    #                 plausible_lm.update(plausible_last)

    #             set_num += 1
            
    #         if plausible_lm:

    #             lm_dict[str(kl)] = plausible_lm
    
    # # print("lm dict is ", lm_dict)
    


    # for key, value in yr_dict.items():

    #     for yr in value:

    #         y = str(yr)[:2]
    #         r = str(yr)[-2:]

    #         plausible_xy = set()

    #         for other_set in list_of_sets:

    #             plausible_first = find_overlap(y, other_set, "last") # xy
    #             # print("for yr ", yr, "xy possibilities are ", plausible_first)

    #             if plausible_first:
    #                 plausible_xy.update(plausible_first)

    #             set_num += 1
            
    #         if plausible_xy:
    #             xy_dict[str(yr)] = plausible_xy
    
    # # print("xy dict is ", xy_dict)


    # # # find mx

    # mx_candidates = set()

    # for xy_key, xy_set in xy_dict.items():

    #     for lm_key, lm_set in lm_dict.items():

    #         for xy in xy_set:

    #             for lm in lm_set:

    #                 x = str(xy)[:2]
    #                 m = str(lm)[-2:]

    #                 mx = int(str(m) + str(x))
    #                 # print("xy is ", xy, "lm is ", lm, "mx is ", mx)

    #                 for other_set in list_of_sets:

    #                     if mx in other_set:

    #                         print("mx ", mx, "composed from ", xy, lm)

    #                         mx_candidates.add(mx)
                    
    
    # print("mx candidates are ", mx_candidates)

    # for mx in mx_candidates:

    #     for poly_key, poly_set in all_sets.items():

    #         if mx in poly_set:

    #             print("mx ", mx, "is found in set ", poly_key)

    # print(len(kl_dict) + len(yr_dict))
    # print(len(mx_candidates))
    

    
generate_sets()















# for tri in tri_set:

#         r = str(tri)[:2]
#         k = str(tri)[-2:]

#         if r == "17":
#             print(tri)
#         if k == "21":
#             print(tri)

#         plausible_kl = set()
#         plausible_yr = set()
#         set_num = 4

#         for other_set in list_of_sets:

#             plausible_first = find_overlap(r, other_set, "last") # yr
#             # print("for tri ", tri, "yr possibilities are ", plausible_first)
#             plausible_last = find_overlap(k, other_set, "first") # kl

#             if plausible_first:
#                 plausible_yr.update(plausible_first)
#             if plausible_last:
#                 plausible_kl.update(plausible_last)

#             set_num += 1
        
#         if plausible_kl:
#             kl_dict[str(tri)] = plausible_kl
#         if plausible_yr:
#             yr_dict[str(tri)] = plausible_yr

#     # print ("kl dict is ", kl_dict)
#     # print("yr_dict is ", yr_dict)


#     for key, value in kl_dict.items():

#         for kl in value:

#             k = str(kl)[:2]
#             l = str(kl)[-2:]

#             plausible_lm = set()

#             for other_set in list_of_sets:

#                 plausible_last = find_overlap(l, other_set, "first") # lm
#                 # print("for kl ", kl, "lm possibilities are ", plausible_last)

#                 if plausible_last:
#                     plausible_lm.update(plausible_last)

#                 set_num += 1
            
#             if plausible_lm:

#                 lm_dict[str(kl)] = plausible_lm
    
#     # print("lm dict is ", lm_dict)
    


#     for key, value in yr_dict.items():

#         for yr in value:

#             y = str(yr)[:2]
#             r = str(yr)[-2:]

#             plausible_xy = set()

#             for other_set in list_of_sets:

#                 plausible_first = find_overlap(y, other_set, "last") # xy
#                 # print("for yr ", yr, "xy possibilities are ", plausible_first)

#                 if plausible_first:
#                     plausible_xy.update(plausible_first)

#                 set_num += 1
            
#             if plausible_xy:
#                 xy_dict[str(yr)] = plausible_xy
    
#     # print("xy dict is ", xy_dict)


#     # # find mx

#     mx_candidates = set()

#     for xy_key, xy_set in xy_dict.items():

#         for lm_key, lm_set in lm_dict.items():

#             for xy in xy_set:

#                 for lm in lm_set:

#                     x = str(xy)[:2]
#                     m = str(lm)[-2:]

#                     mx = int(str(m) + str(x))
#                     # print("xy is ", xy, "lm is ", lm, "mx is ", mx)

#                     for other_set in list_of_sets:

#                         if mx in other_set:

#                             print("mx ", mx, "composed from ", xy, lm)

#                             mx_candidates.add(mx)
                    
    
#     print("mx candidates are ", mx_candidates)

#     for mx in mx_candidates:

#         for poly_key, poly_set in all_sets.items():

#             if mx in poly_set:

#                 print("mx ", mx, "is found in set ", poly_key)

#     print(len(kl_dict) + len(yr_dict))
#     print(len(mx_candidates))

#     # for mx in mx_candidates:

#     #     set_num = 4

#     #     for other_set in list_of_sets:

#     #         for num in other_set:

#     #             if mx == num:

#     #                 print("found a match", mx, num, "set # ", set_num)
#     #                 m_set.add(str(mx)[:2])
#     #                 x_set.add(str(mx)[-2:])

#     #         set_num += 1
        
#     # print(m_set)
#     # print(x_set)

#     # for lm_key, lm_value in lm_dict.items():

#     #     for lm in lm_value:

#     #         l = str(lm)[:2]
#     #         m = str(lm)[-2:]

#     #         if m in m_set:
#     #             l_set.add(l)
    
#     # print(l_set)

#     # for xy_key, xy_value in xy_dict.items():

#     #     for xy in xy_value:

#     #         x = str(xy)[:2]
#     #         y = str(xy)[-2:]

#     #         if x in x_set:
#     #             y_set.add(y)
    
#     # print(y_set)

#     # for yr_key, yr_value in yr_dict.items():

#     #     for yr in yr_value:

#     #         y = str(yr)[:2]
#     #         r = str(yr)[-2:]

#     #         if y in y_set:
#     #             r_set.add(r)
    
#     # print(r_set)

#     # for kl_key, kl_value in kl_dict.items():

#     #     for kl in kl_value:

#     #         k = str(kl)[:2]
#     #         l = str(kl)[-2:]

#     #         if l in l_set:
#     #             k_set.add(k)
    
#     # print(k_set)

#     # for r in r_set:

#     #     for k in k_set:

#     #         rk = int(str(r) + str(k))

#     #         if rk in tri_set:

#     #             print("found a match")
    
#     # remaining_sets = []
    
#     # for y in y_set:

#     #     for r in r_set:

#     #         yr = int(str(y) + str(r))

#     #         for i, other_set in enumerate(list_of_sets):

#     #             if yr in other_set:

#     #                 print("yr", yr, "is found in set ", i)
#     #                 global_y = y
#     #                 global_r = r
                
#     #             else:

#     #                 remaining_sets.append(other_set)

#     # again_remaining_sets = []

#     # for x in x_set:

#     #     xy = int(str(x) + str(global_y))

#     #     for i, other_set in enumerate(remaining_sets):

#     #         if xy in other_set:

#     #             global_x = x

#     #             print("xy", xy, "is found in set ", i)
            
#     #         else:

#     #             again_remaining_sets.append(other_set)
    
#     # left_again = []

#     # for m in m_set:

#     #     mx = int(str(m) + str(global_x))
#     #     # print("mx is ", mx)

#     #     for i, other_set in enumerate(again_remaining_sets):

#     #         if mx in other_set:

#     #             print("mx", mx, "is found in set ", i)
            
#     #         else:

#     #             left_again.append(other_set)
        
#     #     if mx in tri_set:

#     #         print("found")

#     #     for key, value in all_sets.items():

#     #         if mx in value:

#     #             print("mx", mx, "finally found in set", key)
#     #             global_m = m
    
#     # global_l_set = set()

#     # for l in l_set:
        
#     #     lm = int(str(l) + str(global_m))

#     #     for key, value in all_sets.items():

#     #         if lm in value:

#     #             print("lm", lm, "finally found in set", key)
#     #             global_l_set.add(l)

#     # global_k_set = set()
    
#     # for k in k_set:

#     #     for l in global_l_set:

#     #         kl = int(str(k) + str(l))

#     #         for key, value in all_sets.items():

#     #             if kl in value:

#     #                 print("kl", kl, "finally found in set", key)
#     #                 # global_l_set.add(l)
#     #                 global_k_set.add(k)


#     # for k in global_k_set:

#     #     rk = int(str(global_r) + str(k))

#     #     print("rk is ", rk)

#     #     for key, value in all_sets.items():

#     #         if rk in value:

#     #             print("rk", rk, "finally found in set", key)
#     #             # global_l_set.add(l)
#     #             # global_k_set.add(k)